// Define the Area of Interest (AOI) and center the map on it
Map.addLayer(table, {}, 'AOI');
Map.centerObject(table);

// Load Sentinel-2 Surface Reflectance ImageCollection
var Sentinel_Sr = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED');

// Filter image collection based on bounds, date, and cloud coverage, then create a median composite
var image = Sentinel_Sr
            .filterBounds(table)
            .filterDate('2024-05-01', '2024-05-30') // Adjust date range as needed
            .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20)) // Set cloud cover filter
            .median()
            .clip(table);

// Define visualization parameters for Sentinel-2 image
var visParams = {
  bands: ['B4', 'B3', 'B2'],
  min: 0,
  max: 3000,
  gamma: 1.4
};

// Add the processed Sentinel-2 image to the map
Map.addLayer(image, visParams, 'Sentinel-2 Image');

// Load the training points asset
var trainingPoints = ee.FeatureCollection('projects/ee-shobhitchaturvediiitr/assets/tpoints');

// Define label and input bands
var label = 'Class'; // Using the column name from the shapefile
var bands = ['B2', 'B3', 'B4', 'B8']; // Bands with 10 meter spatial resolution
var input = image.select(bands);

// Overlay the points on the imagery to get training data
var trainImage = input.sampleRegions({
  collection: trainingPoints,
  properties: [label],
  scale: 30
});

// Map class numbers to meaningful land cover types
var landCoverMapping = {
  1: 'Water',
  2: 'Barelands',
  3: 'Buildup',
  4: 'Vegetation',
  5: 'Roads'
};

// Add land cover class as a property for easier understanding
var labeledTrainImage = trainImage.map(function(feature) {
  var classValue = feature.get(label);
  return feature.set('LandCover', landCoverMapping[classValue]);
});

// Split the data into training (80%) and testing (20%) sets
var trainingData = labeledTrainImage.randomColumn();
var trainSet = trainingData.filter(ee.Filter.lt('random', 0.8));
var testSet = trainingData.filter(ee.Filter.gte('random', 0.8));

// Gradient Tree Boosting Classifier with specified parameters for Case 28
var classifier = ee.Classifier.smileGradientTreeBoost({
  numberOfTrees: 100,   // Number of trees
  shrinkage: 0.005,      // Shrinkage or learning rate
  samplingRate: 0.3,     // Sampling rate for stochastic boosting
  maxNodes: 10,          // Maximum number of leaf nodes
  loss: 'LeastSquares',  // Loss function for regression
  seed: 0                // Randomization seed
}).train({
  features: trainSet,
  classProperty: label,
  inputProperties: bands
});

// Uncomment and modify the classifier for future cases as needed

/*
  C-19: numberOfTrees = 50, shrinkage = 0.005, samplingRate = 0.7, maxNodes = 10
  var classifier = ee.Classifier.smileGradientTreeBoost({
    numberOfTrees: 50,
    shrinkage: 0.005,
    samplingRate: 0.7,
    maxNodes: 10,
    loss: 'LeastSquares',
    seed: 0
  }).train({
    features: trainSet,
    classProperty: label,
    inputProperties: bands
  });

  C-20: numberOfTrees = 100, shrinkage = 0.005, samplingRate = 0.7, maxNodes = 10
  var classifier = ee.Classifier.smileGradientTreeBoost({
    numberOfTrees: 100,
    shrinkage: 0.005,
    samplingRate: 0.7,
    maxNodes: 10,
    loss: 'LeastSquares',
    seed: 0
  }).train({
    features: trainSet,
    classProperty: label,
    inputProperties: bands
  });

  C-21: numberOfTrees = 500, shrinkage = 0.008, samplingRate = 0.7, maxNodes = 50
  var classifier = ee.Classifier.smileGradientTreeBoost({
    numberOfTrees: 500,
    shrinkage: 0.008,
    samplingRate: 0.7,
    maxNodes: 50,
    loss: 'LeastSquares',
    seed: 0
  }).train({
    features: trainSet,
    classProperty: label,
    inputProperties: bands
  });

  C-22: numberOfTrees = 1000, shrinkage = 0.008, samplingRate = 0.7, maxNodes = 50
  var classifier = ee.Classifier.smileGradientTreeBoost({
    numberOfTrees: 1000,
    shrinkage: 0.008,
    samplingRate: 0.7,
    maxNodes: 50,
    loss: 'LeastSquares',
    seed: 0
  }).train({
    features: trainSet,
    classProperty: label,
    inputProperties: bands
  });

  C-23: numberOfTrees = 1000, shrinkage = 0.008, samplingRate = 0.7, maxNodes = 200
  var classifier = ee.Classifier.smileGradientTreeBoost({
    numberOfTrees: 1000,
    shrinkage: 0.008,
    samplingRate: 0.7,
    maxNodes: 200,
    loss: 'LeastSquares',
    seed: 0
  }).train({
    features: trainSet,
    classProperty: label,
    inputProperties: bands
  });

  C-24: numberOfTrees = 50, shrinkage = 0.01, samplingRate = 0.3, maxNodes = 20
  var classifier = ee.Classifier.smileGradientTreeBoost({
    numberOfTrees: 50,
    shrinkage: 0.01,
    samplingRate: 0.3,
    maxNodes: 20,
    loss: 'LeastSquares',
    seed: 0
  }).train({
    features: trainSet,
    classProperty: label,
    inputProperties: bands
  });

  C-25: numberOfTrees = 200, shrinkage = 0.005, samplingRate = 0.5, maxNodes = 500
  var classifier = ee.Classifier.smileGradientTreeBoost({
    numberOfTrees: 200,
    shrinkage: 0.005,
    samplingRate: 0.5,
    maxNodes: 500,
    loss: 'LeastSquares',
    seed: 0
  }).train({
    features: trainSet,
    classProperty: label,
    inputProperties: bands
  });

  C-26: numberOfTrees = 100, shrinkage = 0.005, samplingRate = 0.3, maxNodes = 10
  var classifier = ee.Classifier.smileGradientTreeBoost({
    numberOfTrees: 100,
    shrinkage: 0.005,
    samplingRate: 0.3,
    maxNodes: 10,
    loss: 'LeastSquares',
    seed: 0
  }).train({
    features: trainSet,
    classProperty: label,
    inputProperties: bands
  });
*/

// Classify the image
var classified = input.classify(classifier);

// Define a palette for the classification
var landcoverPalette = [
  'blue',    // Water (1)
  'yellow',  // Bareland (2)
  'red',     // Buildup (3)
  'green',   // Vegetation (4)
  'black'    // Roads (5)
];

// Add the classified image to the map
Map.addLayer(classified, {palette: landcoverPalette, min: 1, max: 5}, 'Classification');

// Export the classified image to Google Drive
Export.image.toDrive({
  image: classified,
  description: 'LULC_Classification_Output',
  folder: 'GEE_Files', // Ensure this folder exists in your Google Drive
  fileNamePrefix: 'Case_28_LULC', // Updated file name for Case 28
  scale: 30, // Scale of the output image
  region: table.geometry(), // Area to export
  maxPixels: 1e13 // Maximum number of pixels to export
});

// Accuracy Assessment
// Classify the testing set and get a confusion matrix
var classifiedTest = testSet.classify(classifier);
var confusionMatrix = classifiedTest.errorMatrix('Class', 'classification');

print('Confusion matrix:', confusionMatrix);
print('Overall Accuracy:', confusionMatrix.accuracy());
print('Kappa Coefficient:', confusionMatrix.kappa());
print('Producers Accuracy:', confusionMatrix.producersAccuracy());
print('Consumers Accuracy:', confusionMatrix.consumersAccuracy());
